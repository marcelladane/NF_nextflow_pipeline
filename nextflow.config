/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    FOHM AMR Pipeline - Complete Configuration with ABRicate
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Configuration including AMR analysis with ABRicate
----------------------------------------------------------------------------------------
*/

// Global default params
params {
    // Input options
    input                        = null
    
    // Quality control options
    skip_fastqc                  = false
    skip_multiqc                 = false
    
    // AMR analysis options
    skip_abricate                = false
    abricate_db                  = 'card'           // Default database
    abricate_datadir             = null             // Custom database directory (for mock DB)
    abricate_minid               = 60               // Minimum identity threshold (lowered for testing)
    abricate_mincov              = 40               // Minimum coverage threshold (lowered for testing)
    
    // Assembly quality assessment options
    skip_quast                   = false
    
    // Output options
    outdir                       = './results'
    publish_dir_mode             = 'copy'
    
    // Max resource options (conservative defaults)
    max_memory                   = '16.GB'
    max_cpus                     = 8
    max_time                     = '6.h'
    
    // Boilerplate options
    help                         = false
    version                      = false
    tracedir                     = "${params.outdir}/pipeline_info"
}

// Default process configuration
process {
    // Global defaults
    cpus   = { check_max( 1, 'cpus' ) }
    memory = { check_max( 2.GB, 'memory' ) }
    time   = { check_max( 1.h, 'time' ) }
    
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'
    
    // Labels for different process types
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2                     , 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt  , 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt  , 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6                     , 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt  , 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt  , 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12                    , 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt  , 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt  , 'time'    ) }
    }
    
    // Process-specific settings
    // FastQC - lightweight process
    withName: 'FOHM_AMR:FASTQC' {
        memory = '2.GB'
        cpus = 2
        time = '30.min'
    }
    
    // Trimmomatic - moderate resources
    withName: 'FOHM_AMR:TRIMMOMATIC' {
        memory = '4.GB'
        cpus = 4
        time = '1.h'
        ext.args = 'ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36'
    }
    
    // SPAdes - memory intensive
    withName: 'FOHM_AMR:SPADES' {
        memory = '6.GB'
        cpus = 4
        time = '2.h'
        ext.args = '--only-assembler --cov-cutoff auto'
    }
    
    // Flye - memory efficient for test data
    withName: 'FOHM_AMR:FLYE' {
        memory = '2.GB'
        cpus = 2
        time = '2.h'
        ext.args = '--genome-size 1m --min-overlap 1000 --iterations 1'
    }
    
    // ABRicate - AMR analysis
    withName: 'FOHM_AMR:ABRICATE' {
        memory = '4.GB'
        cpus = 2
        time = '30.min'
        ext.args = { "--db ${params.abricate_db} --minid ${params.abricate_minid} --mincov ${params.abricate_mincov}" }
        ext.database = { params.abricate_db }
    }
    
    // QUAST - Assembly quality assessment
    withName: 'FOHM_AMR:QUAST' {
        memory = '4.GB'
        cpus = 2
        time = '30.min'
        ext.args = '--fast --no-plots'
    }
    
    // MultiQC - lightweight
    withName: 'FOHM_AMR:MULTIQC' {
        memory = '2.GB'
        cpus = 1
        time = '30.min'
    }
}

// Container configuration
profiles {
    // Default profile - no containers, use local software
    standard {
        // Use locally installed software
    }
    
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
    }
    
    // Local development profile - reduced resources for laptops/workstations
    local {
        params.max_memory = '6.GB'
        params.max_cpus   = 4
        params.max_time   = '2.h'
        
        // Use mock database for local testing with absolute path
        params.abricate_datadir = "${projectDir}/../databases/abricate"  // Fixed: absolute path
        
        process {
            withLabel:process_single {
                memory = { check_max( 1.GB * task.attempt, 'memory' ) }
            }
            withLabel:process_medium {
                cpus   = { check_max( 2                    , 'cpus'    ) }
                memory = { check_max( 4.GB * task.attempt  , 'memory'  ) }
                time   = { check_max( 2.h  * task.attempt  , 'time'    ) }
            }
            
            // Local ABRicate settings with mock database
            withName: 'FOHM_AMR:ABRICATE' {
                memory = '2.GB'
                cpus = 1
                time = '15.min'
            }
            
            // Local QUAST settings
            withName: 'FOHM_AMR:QUAST' {
                memory = '2.GB'
                cpus = 1
                time = '15.min'
                ext.args = '--fast --no-plots --no-html'
            }
        }
    }
    
    // Production profile - full resources for HPC/cloud environments
    production {
        params.max_memory = '128.GB'
        params.max_cpus   = 32
        params.max_time   = '24.h'
        
        // Use real ABRicate databases in production
        params.abricate_datadir = null  // Use default databases
        
        process {
            withLabel:process_single {
                cpus   = { check_max( 1                     , 'cpus'    ) }
                memory = { check_max( 6.GB * task.attempt   , 'memory'  ) }
                time   = { check_max( 4.h  * task.attempt   , 'time'    ) }
            }
            withLabel:process_medium {
                cpus   = { check_max( 8                     , 'cpus'    ) }
                memory = { check_max( 42.GB * task.attempt  , 'memory'  ) }
                time   = { check_max( 8.h   * task.attempt  , 'time'    ) }
            }
            withLabel:process_high {
                cpus   = { check_max( 16                    , 'cpus'    ) }
                memory = { check_max( 84.GB * task.attempt  , 'memory'  ) }
                time   = { check_max( 16.h  * task.attempt  , 'time'    ) }
            }
            
            // Production ABRicate with full resources
            withName: 'FOHM_AMR:ABRICATE' {
                memory = '8.GB'
                cpus = 4
                time = '1.h'
            }
            
            // Production QUAST with full resources
            withName: 'FOHM_AMR:QUAST' {
                memory = '8.GB'
                cpus = 4
                time = '1.h'
                ext.args = '--plots-format png,pdf'
            }
        }
    }
    
    // SLURM cluster profile - for HPC environments
    slurm {
        process.executor = 'slurm'
        process.queue = 'normal'
        params.max_memory = '256.GB'
        params.max_cpus   = 64
        params.max_time   = '48.h'
        
        // Use system ABRicate databases
        params.abricate_datadir = null
        
        // Inherit production resource settings
        includeConfig 'conf/slurm.config'
    }
    
    // AWS Cloud profile - for cloud deployment
    aws {
        includeConfig 'conf/aws.config'
        params.max_memory = '500.GB'
        params.max_cpus   = 96
        params.max_time   = '72.h'
        
        // Use system ABRicate databases
        params.abricate_datadir = null
    }
    
    test {
        // Test profile for CI/CD and quick validation
        params.max_memory = '6.GB'
        params.max_cpus   = 2
        params.max_time   = '2.h'
        
        // Use mock database for testing with absolute path
        params.abricate_datadir = "${projectDir}/../databases/abricate"  // Fixed: absolute path
        params.abricate_db = 'card'
    }
}

// Export these variables to prevent conflicts
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Execution reports
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}

manifest {
    name            = 'fohm-amr-pipeline'
    author          = 'FOHM Candidate'
    description     = 'AMR analysis pipeline for Illumina and Nanopore sequencing data'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0dev'
}

// Function to ensure resource requirements don't exceed limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   You have not set a value for --max_memory"
            println "   Using default value: $params.max_memory"
            return params.max_memory as nextflow.util.MemoryUnit
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   You have not set a value for --max_time"
            println "   Using default value: $params.max_time"
            return params.max_time as nextflow.util.Duration
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   You have not set a value for --max_cpus"
            println "   Using default value: $params.max_cpus"
            return params.max_cpus as int
        }
    }
}